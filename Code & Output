import yfinance as yf
import pandas as pd
import numpy as np

# Define the international indices and equities
indices = ['^GSPC', '^IXIC', '^DJI', '^FTSE', '^N225']
equities = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB']

# Define the start date
start_date = '2010-01-01'
end_date='2023-05-01'

 #Fetch the data
data = yf.download(indices + equities, start=start_date, end=end_date)['Adj Close']

import pandas as pd 
# Calculate daily returns
returns = data.pct_change()

# Calculate cumulative returns
cumulative_returns = (returns + 1).cumprod() - 1

# Calculate volatility
volatility = returns.std()

# Calculate maximum drawdowns
rolling_max = data.cummax()
drawdown = (data - rolling_max) / rolling_max
max_drawdowns = drawdown.min()

# Calculate Sharpe ratio and Sortino ratio
risk_free_rate = 0.0  # Assuming no risk-free rate
daily_risk = returns.std()
annual_risk = daily_risk * np.sqrt(252)
daily_return_avg = returns.mean()
sharpe_ratio = (daily_return_avg - risk_free_rate) / daily_risk
downside_returns = returns[returns < 0]
downside_risk = downside_returns.std()
sortino_ratio = (daily_return_avg - risk_free_rate) / downside_risk


# Print the results in tabulated form

equity_metrics = pd.DataFrame({
    'Equities': equities,
    'Cumulative Returns': cumulative_returns.iloc[-1, len(indices):].values,
    'Max Drawdowns': max_drawdowns[len(indices):].values,
    'Volatility': volatility[len(indices):].values,
    'Sharpe Ratio': sharpe_ratio[len(indices):].values,
    'Sortino Ratio': sortino_ratio[len(indices):].values
})

index_metrics = pd.DataFrame({
    'Indices': indices,
    'Cumulative Returns': cumulative_returns.iloc[-1, :len(indices)].values,
    'Max Drawdowns': max_drawdowns[:len(indices)].values,
    'Volatility': volatility[:len(indices)].values,
    'Sharpe Ratio': sharpe_ratio[:len(indices)].values,
    'Sortino Ratio': sortino_ratio[:len(indices)].values
})

# Concatenate the equity and index metrics
metrics_df = pd.concat([equity_metrics, index_metrics], ignore_index=True)

# Pivot the DataFrame to obtain the desired table format

results = metrics_df.pivot_table(index=None, columns='Equities').T

# Print the results in tabulated form
pd.set_option('display.max_columns', None)
print(results)

results = metrics_df.pivot_table(index=None, columns='Indices').T

# Print the results in tabulated form
pd.set_option('display.max_columns', None)
print(results)


------------------------------------------------------------------------------------------------------
                                      OUTPUT
--------------------------------------------------------------------------------------------------------
  Cumulative Returns  Max Drawdowns  Sharpe Ratio  Sortino Ratio  \
Equities                                                                   
AAPL                2.221683      -0.370862      0.037077       0.044086   
AMZN                4.296515      -0.363953      0.044112       0.054811   
FB                  1.708307      -0.317989      0.028988       0.038367   
GOOGL               0.430940      -0.366055      0.015320       0.019496   
MSFT                2.680068      -0.339250      0.039711       0.047827   

          Volatility  
Equities              
AAPL        0.010649  
AMZN        0.012771  
FB          0.012726  
GOOGL       0.010087  
MSFT        0.011008  



         Cumulative Returns  Max Drawdowns  Sharpe Ratio  Sortino Ratio  \
Indices                                                                   
^FTSE              5.843728      -0.443201      0.041260       0.056704   
^GSPC             25.083426      -0.437972      0.062020       0.085221   
^IXIC             14.750559      -0.561453      0.048976       0.068810   
^N225             12.006320      -0.371485      0.053840       0.074053   

         Volatility  
Indices              
^FTSE      0.016918  
^GSPC      0.017726  
^IXIC      0.020564  
^N225      0.016201  
